import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'hint.g.dart';

/// {@template hint}
/// A model that represents a hint for a crossword word.
/// {@endtemplate}
@JsonSerializable(ignoreUnannotated: true)
class Hint extends Equatable {
  /// {@macro hint}
  const Hint({
    required this.question,
    required this.response,
    required this.readableResponse,
  });

  /// {@macro hint}
  factory Hint.fromJson(Map<String, dynamic> json) => _$HintFromJson(json);

  /// Question asked by the user to get the hint.
  @JsonKey()
  final String question;

  /// Response generated by Gemini to the question.
  @JsonKey()
  final HintResponse response;

  /// Readable `response`.
  @JsonKey()
  final String readableResponse;

  /// Returns a json representation from this instance.
  Map<String, dynamic> toJson() => _$HintToJson(this);

  @override
  List<Object?> get props => [question, response, readableResponse];
}

/// Enum representing the possible responses to a hint question.
enum HintResponse {
  /// The question is related to the word and an affirmative response helps
  /// the user to guess the word.
  yes,

  /// The question is related to the word and a negative response helps
  /// the user to guess the word.
  no,

  /// Most likely, the question is not related to the word being guessed.
  notApplicable,
}
